@page "/accounts"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using Microsoft.EntityFrameworkCore
@using MyBudget.Models
@using MyBudget.Data
@implements IAsyncDisposable
@inject IDbContextFactory<MyBudget.Data.MyBudgetContext> DbFactory

<PageTitle>Accounts</PageTitle>

<MudText Typo="Typo.h5" class="pt-3"> Accounts</MudText>


<MudDataGrid Items="context.Account" Dense="true" Hover="true" Bordered="true" class="xl-9" Style="--mud-palette-surface: transparent">
    <ToolBarContent>
        <MudSpacer />
        <MudIconButton Variant="Variant.Filled" href="accounts/create" Color="Color.Success" Icon="@Icons.Material.Filled.Add"></MudIconButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="account => account.Name" Title="Name" />
        <PropertyColumn Property="account => account.InitialBalance" Title="Initial Balance" Format="C" />
        <PropertyColumn Property="account => account.CurrentBalance" Title="Current Balance" Format="C" CellStyleFunc="@_cellStyleFunc" />
             <TemplateColumn Title="Color">
            <CellTemplate>
                <MudChip T="string" Style="@($"background-color:{@context.Item.Color};")" Color="Color.Dark">@context.Item.Name</MudChip>
            </CellTemplate>
            

        </TemplateColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Href="@($"accounts/edit?id={context.Item.Id}")" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                <MudIconButton Href="@($"accounts/details?id={context.Item.Id}")" Variant="Variant.Filled" Color="Color.Primary"
                           Icon="@Icons.Material.Filled.Pages"></MudIconButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private MyBudgetContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }
    private Func<Account, string> _cellStyleFunc => x =>
    {
        string style = "";
        if (x.CurrentBalance > 0)
            style += "color:#8CED8C";
        else if (x.CurrentBalance < 0)
            style += "color:#EB0030";
        return style;
    };


    public async ValueTask DisposeAsync() => await context.DisposeAsync();

}
