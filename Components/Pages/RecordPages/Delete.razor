@page "/records/delete"
@using Microsoft.EntityFrameworkCore
@using MyBudget.Models
@inject IDbContextFactory<MyBudget.Data.MyBudgetContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Record</PageTitle>

<MudText Typo="Typo.h5" class="pt-3"> Records</MudText>

<MudText Typo="Typo.h5" Color="Color.Error">Are you sure you want to delete this?</MudText>
<div>
    <hr />
    @if (record is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar>
                        <MudIcon Icon=@(record.Category?.Icon) Size="Size.Medium" />
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">@record.Name</MudText>
                    <MudText Typo="Typo.body1">@record.Description</MudText><hr />
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudTooltip Text="Back to List">
                        <MudIconButton Href="@($"/")" Icon="@Icons.Material.Filled.Close" Color="Color.Default" />
                    </MudTooltip>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudChip T="string">  @record.Category?.Name </MudChip>
                <MudChip T="string" Style="@($"background-color:{@record.FromAccount?.Color};")" Color="Color.Dark">@record.FromAccount?.Name</MudChip>
                <MudChip T="string">R$ @record.Amount</MudChip>
            </MudCardContent>
            <MudCardActions>
            </MudCardActions>
        </MudCard>
        <EditForm method="post" Model="record" OnValidSubmit="DeleteRecord" FormName="delete" Enhance>
            <MudButton href="/">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
        </EditForm>
    }
</div>

@code {
    private Record? record;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        record = await context.Record
        .Include(r => r.Category)
        .Include(r => r.FromAccount)
        .FirstOrDefaultAsync(r => r.Id == Id);

        if (record is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteRecord()
    {
        using var context = DbFactory.CreateDbContext();
        if (record != null)
        {
            // Marcar como deletado (soft delete)
            record.DeletedAt = DateTime.UtcNow;
            context.Record.Update(record);

            // Ajustar o saldo da conta
            var account = await context.Account.FindAsync(record!.FromAccountId);
            if (account != null)
            {
                account.CurrentBalance += record.Type == "Income"
                    ? -record.Amount
                    : record.Amount;
            }
        await context.SaveChangesAsync();
        }
        NavigationManager.NavigateTo("/records");
    }
}
