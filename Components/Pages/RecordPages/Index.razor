@page "/records"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using Microsoft.EntityFrameworkCore
@using MyBudget.Models
@using MyBudget.Data
@using MudBlazor.Services
@using System;
@using System.Globalization;
@using System.Threading;
@implements IAsyncDisposable
@inject IDbContextFactory<MyBudget.Data.MyBudgetContext> DbFactory
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage


<PageTitle>Records</PageTitle>

<MudText Typo="Typo.h5" class="pt-3">Records</MudText>

@if (records == null)
{
    <MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
        <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center" Style="height: 100vh;" Spacing="12" Class="mt-16">
            <MudProgressCircular Color="Color.Success" Indeterminate="true" />
        </MudGrid>
    </MudContainer>

}
else
{
    @*Filtros Globais*@
    <MudPaper Class="d-inline-flex align-center py-6">
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Search" @bind-Value="_searchText" Variant="Variant.Filled" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" OnInput="ApplyGlobalFilter" />
            </MudItem>
            <MudItem xs="6" sm="3" md="2">
                <MudSelect Label="Category" @bind-Value="_selectedCategory" Variant="Variant.Filled" Clearable="true">
                    @foreach (var category in _uniqueCategories)
                    {
                        <MudSelectItem Value="@category">@category</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6" sm="3" md="2">
                <MudSelect Label="Account" @bind-Value="_selectedAccount" Variant="Variant.Filled" Clearable="true">
                    @foreach (var account in _uniqueAccounts)
                    {
                        <MudSelectItem Value="@account">@account</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6" sm="3" md="2">
                <MudSelect Label="Type" @bind-Value="_selectedType" Variant="Variant.Filled" Clearable="true">
                    <MudSelectItem Value="@("Income")">Income</MudSelectItem>
                    <MudSelectItem Value="@("Expense")">Expense</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="3" md="3">
                <MudDateRangePicker Label="Transaction Date Range" @bind-DateRange="_dateRange" CloseOnSelection="false" ValueChanged="OnDateRangeChanged" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudDatePicker Label="Budget Month" HelperText="@_yearMonth?.ToShortDateString()" @bind-Date="_yearMonth" OpenTo="OpenTo.Month" FixDay="1" />

            </MudItem>
            <MudItem xs="6" sm="4" md="4" Class="d-flex align-items-end">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ApplyGlobalFilter">Apply Filters</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="ClearGlobalFilters">Clear</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudBreakpointProvider>
        <!-- #region Desktop -->
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudDataGrid Class="d-xs-inline-flex" Items="@_filteredRecords" Dense="true" Hover="true" Bordered="true" Style="--mud-palette-surface: transparent" SortMode="SortMode.Single" ColumnResizeMode="ResizeMode.Column" Width="100%">
                <ToolBarContent>
                    <MudSpacer />
                    <MudIconButton Variant="Variant.Filled" href="records/create" Color="Color.Success" Icon="@Icons.Material.Filled.Add"></MudIconButton>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Title="Category" Property="records => records.Category.Name" />
                    <PropertyColumn Title="Recurrency" Property="records => records.Name" />
                    <PropertyColumn Title="Description" Property="records => records.Description" />
                    <PropertyColumn Title="Amount" Property="x => x.Amount" Format="C" Filterable="false" CellStyleFunc="@_cellStyleFunc" />
                    <PropertyColumn Title="Account" Property="records => records.FromAccount.Name" />
                    <TemplateColumn Title="Transaction Date" SortBy="@(records => records.TransactionDate)" Sortable="true">
                        <CellTemplate>
                            <MudTextField @bind-Value="@context.Item.TransactionDate" />
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Payment Date" SortBy="@(records => records.PaymentDate)" Sortable="true">
                        <CellTemplate>
                            <MudTextField @bind-Value="@context.Item.PaymentDate" />
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Budget Date" SortBy="@(records => records.BudgetDate)" Sortable="true">
                        <CellTemplate>
                            <MudTextField @bind-Value="@context.Item.BudgetDate" />
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn CellStyle="width: 15%">
                        <CellTemplate>
                            <MudIconButton Href="@($"records/edit?id={context.Item.Id}")" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                            <MudIconButton Href="@($"records/details?id={context.Item.Id}")" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Pages"></MudIconButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudChip Color="Color.Success">Incomes: @_filteredRecords.Sum(r => r.Type == "Income" ? r.Amount : 0).ToString("C")</MudChip>
                    <MudChip Color="Color.Error">Expenses: @_filteredRecords.Sum(r => r.Type == "Expense" ? r.Amount : 0).ToString("C")</MudChip>
                    <MudChip Color="Color.Primary">Total: @_filteredRecords.Sum(r => r.Type == "Expense" ? r.Amount : -r.Amount).ToString("C")</MudChip>
                    <MudDataGridPager T="Record" Class="align-self-end py-4 flex-1" />
                </PagerContent>
            </MudDataGrid>
        </MudHidden>
        <!-- #endregion -->
        <!-- #region Mobile -->
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudDataGrid MultiSelection="true" Items="@_filteredRecords" Filterable="true"
            Hideable="true" Groupable="true" GroupExpanded="false">
                <ToolBarContent>
                    <MudSpacer />
                    <MudIconButton Variant="Variant.Filled" href="records/create" Color="Color.Success" Icon="@Icons.Material.Filled.Add"></MudIconButton>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Title="Category" Property="records => records.Category.Name" />
                    <PropertyColumn Title="Name" Property="records => records.Name" Groupable="false" />
                    <PropertyColumn Title="Amount" Property="x => x.Amount" Format="C" Filterable="false" CellStyleFunc="@_cellStyleFunc" />
                    <PropertyColumn Title="Account" Property="records => records.FromAccount.Name" />
                    <TemplateColumn CellStyle="width: 100%" Title="Transaction Date" SortBy="@(records => records.TransactionDate)" Sortable="true">
                        <CellTemplate>
                            <MudTextField @bind-Value="@context.Item.TransactionDate" />
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn CellStyle="width: 200px" Title="Payment Date" SortBy="@(records => records.PaymentDate)" Sortable="true">
                        <CellTemplate>
                            <MudTextField @bind-Value="@context.Item.PaymentDate" />
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn CellStyle="width: 200px" Title="Budget Date" SortBy="@(records => records.BudgetDate)" Sortable="true">
                        <CellTemplate>
                            <MudTextField @bind-Value="@context.Item.BudgetDate" />
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn CellStyle="width: 150px">
                        <CellTemplate>
                            <MudIconButton Href="@($"records/edit?id={context.Item.Id}")" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                            <MudIconButton Href="@($"records/details?id={context.Item.Id}")" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Pages"></MudIconButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Record" />
                </PagerContent>
            </MudDataGrid>
        </MudHidden>
        <!-- #endregion -->
    </MudBreakpointProvider>
}
@code {
    private MyBudgetContext context = default!;
    private List<Record> records;
    HashSet<Record> _selectedItems = new();
    HashSet<Record> _filterItems = new();
    private HashSet<string> _uniqueCategories = new();
    private HashSet<string> _uniqueAccounts = new();

    #region  Início Filtro Global

    private DateRange _dateRange { get; set; }

    private string? _searchText;
    private string? _selectedCategory;
    private string? _selectedAccount;
    private string? _selectedType;
    private DateTime? _startDate;
    private DateTime? _endDate;
    private DateTime? _yearMonth;

    private List<Record> _filteredRecords = new();

    private async Task ApplyGlobalFilter()
    {
        if (_dateRange is not null)
        {
            _startDate = _dateRange.Start;
            _endDate = _dateRange.End;
        }
        _filteredRecords = await context.Record
            .Where(r =>
                (string.IsNullOrWhiteSpace(_searchText) ||
                    r.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ||
                    r.Description.Contains(_searchText, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(_selectedCategory) || r.Category.Name == _selectedCategory) &&
                (string.IsNullOrWhiteSpace(_selectedAccount) || r.FromAccount.Name == _selectedAccount) &&
                (string.IsNullOrWhiteSpace(_selectedType) || r.Type == _selectedType) &&
                (!_startDate.HasValue || r.TransactionDate >= _startDate) &&
                (!_endDate.HasValue || r.TransactionDate <= _endDate) &&
                (!_yearMonth.HasValue || r.BudgetDate == _yearMonth))
            .ToListAsync();

        // Salva os filtros na sessão
        await SessionStorage.SetAsync("selectedCategory", _selectedCategory);
        await SessionStorage.SetAsync("selectedAccount", _selectedAccount);
        await SessionStorage.SetAsync("startDate", _startDate);
        await SessionStorage.SetAsync("endDate", _endDate);
        await SessionStorage.SetAsync("yearMonth", _yearMonth);
    }

    private void ClearGlobalFilters()
    {
        _searchText = string.Empty;
        _selectedCategory = null;
        _selectedAccount = null;
        _selectedType = null;
        _startDate = null;
        _endDate = null;
        _yearMonth = null;

        _filteredRecords = records.ToList(); // Restaura a lista completa
    }

    private void OnDateRangeChanged(DateRange newRange)
    {
        ApplyGlobalFilter(); // Atualiza os filtros sempre que o intervalo mudar
    }


    #endregion Filtro Global


    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }
    private bool _isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        records = await context.Record
        .Include(r => r.Category) // Inclui Category
        .Include(r => r.User)     // Inclui User, se existir
        .Include(r => r.FromAccount)
        .ToListAsync();

        _filteredRecords = records.ToList();

        // Popula as categorias únicas
        _uniqueCategories = records.Select(r => r.Category.Name).Distinct().OrderBy(name => name).ToHashSet();

        // Popula as contas únicas
        _uniqueAccounts = records.Select(r => r.FromAccount.Name).Distinct().OrderBy(name => name).ToHashSet();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            _isInitialized = true;

            // Aguarde o carregamento do JavaScript e então recupere os dados
            // Tenta recuperar os filtros salvos
            var savedCategory = await SessionStorage.GetAsync<string>("selectedCategory");
            var savedAccount = await SessionStorage.GetAsync<string>("selectedAccount");
            var savedStartDate = await SessionStorage.GetAsync<DateTime?>("startDate");
            var savedEndDate = await SessionStorage.GetAsync<DateTime?>("endDate");
            var savedYearMonth = await SessionStorage.GetAsync<DateTime?>("yearMonth");

            _selectedCategory = savedCategory.Success ? savedCategory.Value : null;
            _selectedAccount = savedAccount.Success ? savedAccount.Value : null;
            _startDate = savedStartDate.Success ? savedStartDate.Value : null;
            _endDate = savedEndDate.Success ? savedEndDate.Value : null;
            _yearMonth = savedYearMonth.Success ? savedYearMonth.Value : null;



    //         // Re-renderiza o componente para aplicar os valores carregados
    //         StateHasChanged();
        }
    }
    private Func<Record, string> _cellStyleFunc => x =>
    {
        string style = "";
        if (x.Type == "Income")
            style += "color:#8CED8C";
        else if (x.Type == "Expense")
            style += "color:#EB0030";
        return style;
    };

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
