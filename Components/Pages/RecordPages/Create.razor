@page "/records/create"
@using Microsoft.EntityFrameworkCore
@using MyBudget.Models
@inject IDbContextFactory<MyBudget.Data.MyBudgetContext> DbFactory
@inject NavigationManager NavigationManager
@inject ISnackbar SnackbarService
@using System.Globalization

<PageTitle>Create Record</PageTitle>

<h1>Create</h1>

<h2>Record</h2>
<hr />
<EditForm method="post" Model="Record" OnValidSubmit="AddRecord" FormName="create" Enhance>
    <MudGrid Class="d-xs-inline-flex">
        <MudItem Class="pt-4" xs="8" sm="4">
            <MudRadioGroup @bind-Value="Record.Type">
                <MudRadio Value="@("Income")">Income</MudRadio>
                <MudRadio Value="@("Expense")">Expense</MudRadio>
            </MudRadioGroup>
            <MudTextField Label="Recurrency" @bind-Value="Record.Name" />
            <MudTextField Label="Description" @bind-Value="Record.Description" />
            <MudSelect T="Int32" Label="Category" @bind-Value="Record.CategoryId">
                <MudSelectItem T="Int32" Value="-1" Disabled>Select Category</MudSelectItem>
                @foreach (var category in categories)
                {
                    <MudSelectItem T="Int32" Value="@category.Id">@category.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem Class="pt-4" xs="8" sm="4">
            <MudSelect T="Int32" Label="Account" @bind-Value="Record.FromAccountId">
                <MudSelectItem T="int" Value="0" Disabled>Select Account</MudSelectItem>
                @foreach (var account in accounts)
                {
                    <MudSelectItem T="Int32" Value="@account.Id">@account.Name</MudSelectItem>
                }
            </MudSelect>
            <MudNumericField Label="Amount" @bind-Value="Record.Amount" HideSpinButtons="true" Immediate="false" Format="N2" Culture="@_br" />
            <MudDatePicker Label="Transaction Date" @bind-Date="Record.TransactionDate" Placeholder="Select Transaction Date" />
            <MudDatePicker Label="Payment Date" @bind-Date="Record.PaymentDate" Placeholder="Select Payment Date" />
            <MudDatePicker Label="Budget Month" HelperText="@Record.BudgetDate?.ToShortDateString()" @bind-Date="Record.BudgetDate" OpenTo="OpenTo.Month" FixDay="1" Placeholder="Select Budget Month" />
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
            </MudCardActions>
        </MudItem>
    </MudGrid>
</EditForm>
<div>
    <a href="/records">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Record Record { get; set; } = new() { CategoryId = -1 };
    private List<Category> categories = new List<Category>();
    private List<Account> accounts = new List<Account>();
    private List<User> users = new List<User>();

    public CultureInfo _br = CultureInfo.GetCultureInfo("pt-BR");

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        categories = await context.Category.OrderBy(c => c.Name).ToListAsync();
        accounts = await context.Account.OrderBy(a => a.Name).ToListAsync();
        users = await context.User.ToListAsync();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddRecord()
    {
        if (Record.Type == null)
        {
            SnackbarService.Add(@<div>No record type selected</div>, Severity.Error);
            return;
        }
        if (Record.CategoryId == -1)
        {
            SnackbarService.Add(@<div>No category selected</div>, Severity.Error);
            return;
        }
        if (Record.FromAccountId == 0)
        {
            SnackbarService.Add(@<div>Select an account</div>, Severity.Error);
            return;
        }
        if (Record.Amount <= 0)
        {
            SnackbarService.Add(@<div>Invalid value on amount field</div>, Severity.Error);
            return;
        }

        if (Record.ToAccountId == -1)
        {
            Record.ToAccountId = 0;
        }

        using var context = DbFactory.CreateDbContext();
        context.Record.Add(Record);
        var account = await context.Account.FindAsync(Record.FromAccountId);
        if (account != null)
        {
            account.CurrentBalance += Record.Type == "Income"
                ? Record.Amount // Incrementa para receitas
                : -Record.Amount; // Decrementa para despesas
        }
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/records");
    }
}
