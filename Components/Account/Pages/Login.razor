@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms

@inject SignInManager<IdentityUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Log in</PageTitle>

<div class="login-container" style="align-items: center; justify-self: center">
    <div class="login-box">
        <MudText Typo="Typo.h5" color="Color.Primary">Faça login</MudText>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-group">
                <label>Senha</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-check">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                <label class="form-check-label">Lembrar-me</label>
            </div>

            <button type="submit" class="btn btn-primary btn-block">Login</button>

            <div class="links">
                <a href="Account/ForgotPassword">Esqueceu a senha?</a> |
                <a href="Account/Register">Criar conta</a> |
                <a href="Account/ResendEmailConfirmation">Reenviar confirmação</a>
            </div>
        </EditForm>
    </div>
</div>

<style>
    /* Tema escuro */
    body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #191923;
        color: #222;
        font-family: Arial, sans-serif;
        margin: 0;
    }

    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        max-width: 400px;
        padding: 20px;
    }

    .login-box {
        width: 100%;
        background: #171717;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        text-align: center;
    }

    .form-group {
        margin-bottom: 15px;
        text-align: left;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        background: #333;
        border: 1px solid #444;
        border-radius: 5px;
        color: #fff;
    }

        .form-control:focus {
            border-color: #182590;
            outline: none;
        }

    .btn-block {
        width: 100%;
        padding: 10px;
        background: #282590;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 10px;
        transition: background 0.3s ease;
    }

        .btn-block:hover {
            background: rgba(89,74,226,1)
        }

    .links {
        margin-top: 15px;
    }

        .links a {
            color: rgba(119,107,231,1);
            text-decoration: none;
        }

            .links a:hover {
                text-decoration: underline;
            }

    .form-check-input {
        margin-right: 5px;
    }

    .form-check-label {
        font-size: 0.9rem;
    }

    label {
        color: rgba(119,107,231,1);
    }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext.User.Identity?.IsAuthenticated == true)
        {
            return;
        }
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
        else
        {
            errorMessage = "Erro: Tentativa de login inválida.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Lembrar-me?")]
        public bool RememberMe { get; set; }
    }
}
